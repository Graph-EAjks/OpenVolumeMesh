Version 3.0 (2021/08/?)
  - Minimum C++ version is now 17 instead of 11
  - Property system redesign:
    - Properties can be shared or private (in addition to being 'persistent'):
        - private properties are "invisible", i.e. request_*_prop etc do not find it (e.g. create a second property)!
        - persistent properties must always be shared
        - private properties can be created on const meshes: create_private_property()
        - `set_shared()` can switch a property between shared and private
        - `set_persistent()` can switch a property between shared and persistant
    - Property Handles were abolished, they were never fully implemented
    - Removed size_of, element_size etc.
    - Iteration over a `ResourceManager` (Mesh)'s persistent properties without exposing internals
    - Hide some internals from the publicly accessible property types
    - Add `ResourceManager::n_persistent_props<Entity::Vertex/...>` and `n_props<Entity>`
    - `prop->n_elements` replaced by `prop.size()`

  - *Handle type changes:
    - No more direct comparison operators with ints without conversion
    - New methods:
        - `HalfEdgeHandle`:
            - `edge_handle()`
            - `opposite_handle()`
            - `subidx() -> {0, 1}`
        - `HalfFaceHandle`:
            - `face_handle()`
            - `opposite_handle()`
            - `subidx() -> {0, 1}`
        - `EdgeHandle`: `halfedge_handle({0, 1})`
        - `FaceHandle`: `halfface_handle({0, 1})`
    - Halfface- and halfedge-handles handles gain .subidx()->{0,1} and .face_handle()/edge_handle() member function
    - Face- and edge-handles handles gain a .half({0,1}) member function

  - Other new features:
    - `HandleIndexing` allows enforcing handle-safe indexing into vectors

  - Other API changes:
    - `TopologyKernel`:
        - remove `delete_multiple_*` and `delete_cell_range`: they were unsafe to use and not very useful anymore.

Version 2.2.2 (2021-11-19)
  - CMake: disable automoc/autouic for better integration into projects that use Qt
  - NormalAttrib fix: actually save the computed normal

Version 2.2 (2021-08-13)
  Behaviour improvements:
    - TetrahedralMeshTopologyKernel:
        - split_edge and split_face now copy cell properties of the deleted cells to the newly created ones
        - intermediate non-manifold situations are avoided
  Performance improvements:
    - Utilize std::vector::reserve to avoid reallocations
  API changes:
    - add_{face,edge,cell} takes an std::vector by value instead of by const reference.
    - add_face topology check is more strict: the halfedges need to be in circular order.
    - (half)edge_vertices(), face_halffaces(), edge_halfedges(), face_halffaces(), face_cells(): Return std::array<*Handle,2> instead of vector.

Version 2.1 (2019/09/09)
- Modern target-based CMake 3 build system
- !!!Break compatiblity with C++98, require C++11 as mininum!!!
- Renamed *T.cc into *T_impl.hh to avoid ugly problems ith several IDEs
- Fix bug in halfface reordering
- Track if garbage collection is necessary.
- Ignore non-serializable datatypes when saving properties instead of throwing exception. 
- Add support for C++11 range-for for iterator pairs
- mark vertex_cells and halfedge_cells as const
- Implement Property copy(src_idx, dst_idx) analogue of OpenMesh properties
- Append d to debug library
- Add vertex vertex iterator to iterate over one-ring of a vertex
- Add vertex face iterator to iterate over all faces incident to a vertex
- Implement ptr::make_unique and clean up pre-c++11 ifdefs.
- Disable file_converter if boost is not found.
- Make handle constructors explicit
- Made property handle constructors explicit
- Enable range iterators on MSVC
- Fix mesh copying by implementing copy constructors and clone methods
- Fix bug in edge split of tetrahedral meshes
- Ensure that halfface iterators start with a boundary halffaces when cells are deleted
- Added new iterators (VertexIHalfEdgeIter, VertexEdgeIter, VertexHalfFaceIter, EdgeHalfFaceIter, EdgeFaceIter, EdgeCellIter)
- Added `hidden` flag to StatusAttrib for visualisation purposes
- Added InterfaceAttrib to denote interior interfaces



Version 2.0 (2016/08/03)
- Added Tetrahedral Mesh class
- Implemented fast and deferred deletion of entities
- Improved serializiers
- Allow to force static casts when requesting properties
- Fixed some bugs in swap methods
- Fix bug in adding a hex cell with valence 2 edge
- Fix a bug when swapping deleted cells
- Updated vector class to latest OpenMesh vector
- Move vector helpers into OpenVolumeMesh::Geometry namespace
- Remove html literal operator

Version 1.2 (2015/10/01)

- Status Attribute offers a garbage collection which removes all elements previously tagged as deleted.
- Circulators will now circulate as often as desired.
- Property (de)serialization now done via (de)serialize functions allowing to customize (de)serialization for custom properties.
- Fixed some compatibility issues.
- Various smaller improvements and bugfixes.
